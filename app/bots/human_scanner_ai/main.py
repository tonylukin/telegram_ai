from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
from telegram.constants import ParseMode
import aiohttp

from app.config import TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN, APP_HOST
from app.configs.logger import logger

USERNAME, CHATS, CONFIRM = range(3)

user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id] = {}
    intro_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö.\n"
        "–í–≤–µ–¥–∏—Ç–µ username (@ivan), –µ—Å–ª–∏ –µ—Å—Ç—å, –ª–∏–±–æ –ø–æ–ª–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):"
    )
    await update.message.reply_text(intro_text)
    return USERNAME


async def restart(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞'."""
    if isinstance(update_or_query, Update):  # /start
        chat_id = update_or_query.effective_chat.id
    else:  # callback_query
        query = update_or_query
        await query.answer()
        chat_id = query.message.chat_id
        await query.message.reply_text("üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ username:")

    user_data[chat_id] = {}
    return USERNAME


async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id]['username'] = update.message.text

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: @chat1, https://t.me/chat2, t.me/+–∏–Ω–≤–∞–π—Ç).\n"
        "–ß–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)."
    )
    return CHATS


async def get_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chats = [c.strip() for c in update.message.text.split(',') if c.strip()]
    user_data[chat_id]['chats'] = chats

    username = user_data[chat_id]['username']
    summary = f"üîé –í—ã –≤–≤–µ–ª–∏:\nUsername: `{username}`\n–ß–∞—Ç—ã:\n" + \
              '\n'.join(f"- `{c}`" for c in chats)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    await update.message.reply_text(
        summary,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "confirm":
        await query.edit_message_text(
            "‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è... (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑)"
        )
        payload = {
            "username": user_data[chat_id]['username'],
            "chats": user_data[chat_id]['chats'],
        }
        return await send_request_with_retry(query, payload)

    elif query.data == "restart":
        return await restart(query, context)

    elif query.data == "cancel":
        await query.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END


async def retry_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    payload = {
        "username": user_data[chat_id]['username'],
        "chats": user_data[chat_id]['chats'],
    }

    await query.edit_message_text("‚è≥ –ü–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
    return await send_request_with_retry(query, payload)


async def send_request_with_retry(query, payload):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{APP_HOST}/user-info/collect", json=payload) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    desc = result["result"].get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")],
                        [InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel")],
                    ]
                    await query.message.reply_text(
                        f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{desc}",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return CONFIRM
                else:
                    await send_error_with_retry(query, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.status} {await resp.text()}")
                    return CONFIRM
    except Exception as e:
        await send_error_with_retry(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:\n{str(e)}")
        return CONFIRM


async def send_error_with_retry(query, error_text):
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    await query.message.reply_text(
        error_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start)
        ],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            CHATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_chats)],
            CONFIRM: [
                CallbackQueryHandler(handle_confirmation, pattern="^(confirm|restart|cancel)$"),
                CallbackQueryHandler(retry_request, pattern="^retry$"),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel)
        ],
    )

    app.add_handler(conv)
    app.run_polling()
