from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
import aiohttp

from app.config import TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN, APP_HOST
from app.configs.logger import logger

USERNAME, CHATS, CONFIRM = range(3)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = {}
    intro_text = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Ö –∏–ª–∏ –∏–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.\n –í–≤–µ–¥–∏—Ç–µ username (@ivan), –µ—Å–ª–∏ –µ—Å—Ç—å, –ª–∏–±–æ –ø–æ–ª–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):"
    await update.message.reply_text(intro_text)
    return USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id]['username'] = update.message.text

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: @chat1, https://t.me/chat2, t.me/+–∏–Ω–≤–∞–π—Ç).\n –ß–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–Ω–∞–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–º–æ–≤–æ–π —á–∞—Ç:")
    return CHATS

async def get_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chats = [c.strip() for c in update.message.text.split(',') if c.strip()]
    user_data[chat_id]['chats'] = chats

    username = user_data[chat_id]['username']
    summary = f"üîé –í—ã –≤–≤–µ–ª–∏:\nUsername: `{username}`\n–ß–∞—Ç—ã:\n" + '\n'.join(f"- `{c}`" for c in chats)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    await update.message.reply_text(summary, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "confirm":
        await query.edit_message_text("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è... (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É - –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑)")

        payload = {
            "username": user_data[chat_id]['username'],
            "chats": user_data[chat_id]['chats'],
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{APP_HOST}/user-info/collect", json=payload) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        desc = result["result"].get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
                        await query.message.reply_text(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{desc}")
                    else:
                        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.status} {await resp.text()}")
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:\n{str(e)}")

        return ConversationHandler.END

    elif query.data == "restart":
        await query.message.reply_text("üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ username:")
        return USERNAME

    elif query.data == "cancel":
        await query.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            CHATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_chats)],
            CONFIRM: [CallbackQueryHandler(handle_confirmation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()
