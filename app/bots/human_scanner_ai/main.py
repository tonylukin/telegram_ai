from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)
from telegram.constants import ParseMode
import aio_pika
import json

from app.config import TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN, APP_HOST, RABBITMQ_QUEUE_HUMAN_SCANNER, API_TOKEN
from app.configs.logger import logger
from app.config import RABBITMQ_USER, RABBITMQ_PASSWORD, RABBITMQ_HOST

MENU, USERNAME, CHATS, CONFIRM = range(4)
LOGGER_PREFIX = 'HumanScannerBot'
user_data = {}

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        message = update.message
    elif update.callback_query:
        await update.callback_query.answer()
        message = update.callback_query.message
    else:
        # fallback
        return None

    chat_id = message.chat.id
    user_data[chat_id] = {}

    keyboard = [
        [InlineKeyboardButton("üîé HumanScan", callback_data="human_scan")],
        [InlineKeyboardButton("‚ÑπÔ∏è Info", callback_data="info")]
    ]
    intro_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.\n"
        "–£ –±–æ—Ç–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    )
    await message.reply_text(
        intro_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MENU


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "human_scan":
        user_data[chat_id] = {}
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ username (@ivan), –µ—Å–ª–∏ –µ—Å—Ç—å, –ª–∏–±–æ –ø–æ–ª–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤), –ª–∏–±–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:"
        )
        return USERNAME

    elif query.data == "info":
        await query.message.reply_text(
"""üîé –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram?
–¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –∫–æ–≥–¥–∞-–ª–∏–±–æ! –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ —Ö–æ—Ç—è –±—ã –µ–≥–æ –∏–º—è –∏ —á–∞—Ç—ã, –≥–¥–µ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç.

‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
–í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ:

–ù–∏–∫–Ω–µ–π–º (@username) –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, –≥–¥–µ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å

üìå –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ:

–ù–∏–∫–Ω–µ–π–º—É —á–∞—Ç–∞ (@chatname)

–°—Å—ã–ª–∫–µ –Ω–∞ —á–∞—Ç

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–∞—Ç–∞ (–¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ–º—É ‚Äî –±–æ—Ç —Å–∞–º –Ω–∞–π–¥–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)

üéØ –ß–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã —É–∫–∞–∂–µ—Ç–µ –∏–º—è, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
–ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–æ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.

üí¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ —Ö–æ—Ç—å 1 —á–∞—Ç, —Ö–æ—Ç—å 100 ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç!

üöÄ –£–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —É–¥–æ–±–Ω–æ.
–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã—Ö –ª—é–¥–µ–π –≤ Telegram ‚Äî –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ."""
        )
        return await show_menu_again(query, context)


async def show_menu_again(query, context):
    keyboard = [
        [InlineKeyboardButton("üîé HumanScan", callback_data="human_scan")],
        [InlineKeyboardButton("‚ÑπÔ∏è Info", callback_data="info")]
    ]
    await query.message.reply_text(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await menu(update, context)

async def restart(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    return await menu(update_or_query, context)

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id]['username'] = update.message.text

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: @chat1, https://t.me/chat2, t.me/+–∏–Ω–≤–∞–π—Ç, –ª–∏–±–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞).\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–Ω–∞–ª—ã (–∏ –∏—Ö —á–∞—Ç—ã) –∏ –æ–±—ã—á–Ω—ã–µ —á–∞—Ç—ã.\n"
        "–ß–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏ (–ª–∏–±–æ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)."
    )
    return CHATS


async def get_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chats = [c.strip() for c in update.message.text.split(',') if c.strip()]
    user_data[chat_id]['chats'] = chats

    username = user_data[chat_id]['username']
    summary = f"üîé –í—ã –≤–≤–µ–ª–∏:\nUsername: `{username}`\n–ß–∞—Ç—ã:\n" + \
              '\n'.join(f"- `{c}`" for c in chats)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart")],
    ]
    await update.message.reply_text(
        summary,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "confirm":
        await query.edit_message_text(
            "‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω \n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
        )
        payload = {
            "username": user_data[chat_id]['username'],
            "chats": user_data[chat_id]['chats'],
        }
        return await add_request_to_queue(query, payload)

    elif query.data == "restart":
        return await restart(query, context)

    return await menu(update, context)


async def add_request_to_queue(query, payload):
    try:
        connection = await aio_pika.connect_robust(f"amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@{RABBITMQ_HOST}/")
        async with connection:
            channel = await connection.channel()
            queue = await channel.declare_queue(RABBITMQ_QUEUE_HUMAN_SCANNER, durable=True)
            message_body = json.dumps({"data": payload, "chat_id": query.message.chat_id}).encode("utf-8")

            message = aio_pika.Message(
                body=message_body,
                content_type="application/json",
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT,
            )
            await channel.default_exchange.publish(
                message,
                routing_key=queue.name,
            )

    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} - adding to queue error: {str(e)}")

    return MENU


if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_HUMAN_SCANNER_AI_BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start)
        ],
        states={
            MENU: [
                CallbackQueryHandler(handle_menu, pattern="^(human_scan|info)$")
            ],
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            CHATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_chats)],
            CONFIRM: [
                CallbackQueryHandler(handle_confirmation, pattern="^(confirm|restart)$"),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(restart, pattern="^restart$"),
        ],
    )

    app.add_handler(conv)
    app.run_polling()
